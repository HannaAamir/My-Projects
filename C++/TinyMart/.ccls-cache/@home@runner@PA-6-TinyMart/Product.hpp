#ifndef PRODUCT_HPP
#define PRODUCT_HPP

#include <string>
#include <iostream>

using namespace std;
// following assignment instructions
typedef int prod_id_t;

//following assignment instruction
//relevant name of product (eg. singer, author etc.)
struct NameType {
  string firstName;
  string lastName;
};

//abstract base class used to classify the various products sold by being inherited
class Product {

public:

    Product(); //default constructor
    Product(string aProdName, double aPrice); //constructor for product name and price
    //getter functions
    prod_id_t getProdID() { return prodID; } //product ID
    string getProdName() { return prodName; } //product name
    double getPrice() { return price; } //product price
    float getReviewRate() { return reviewRate; } //product review-rate
    //setter functions
    void setProdID(prod_id_t theID) { prodID = theID; }
    void setProdName(string theName) { prodName = theName; }
    void setPrice(double thePrice) { price = thePrice; }
    void setReviewRate(float theRate) { reviewRate = theRate; }
    //following functions are virtual as the implementation varies depending on the derived product class type
    virtual string getProdTypeStr() = 0; 
    /*Accesses type of product.*/
    virtual void displayContentsInfo() = 0;
    /*Displays the derived product type-specific information using the virtual function.*/
    virtual void displayProdInfo();
    /* Displays the common atributes of all product types in the Product Class. Additionally, invokes displaysContentsInfo()*/
private:
    int prodID; 
    string prodName;
    double price;
    float reviewRate;
    static prod_id_t nextID; //contains a unique next product id which is generated by createNewID() static member function
    static prod_id_t createNewID(); //creating a Product-wise next product ID
};

#endif